@name The Ultimate Turret E2 by Naki V1.0 (Physical)
@inputs [Gun Base Chair]:entity Cam:wirelink
@persist Interval RotationForce DampingForce AimMode GunLockRelease [Turret_Lock_Release_Button Switch_Aim_Mode_Button]:string
@persist Elevation Depression [Inertia]:angle Pitch DragFunction DeltaFunction Lim:vector
@persist 
#|-----------------|
#|Code made by Naki|
#|Do not distribute|
#|-----------------|

if(dupefinished()){reset()}
if(first()){
    #Just to hide the name of the e2 when used, prevents admins from stealing this, at least it has worked before as they seem to have no interest in public e2s
    Names=array("setang turret","GenericGyro5","hgg5","GG5","Turret Hud Combo V2","Turret Hud Combo V4","Turret Hud Combo V5","Turret Hud Combo V6","eztankturret","eztankturret_white","clock_turret")
    setName(Names[randint(1,Names:count()),string])
    
    #[
    
    -- Introduction
    
    The Ultimate Turret E2 by Naki V1.0
    Server friendly alternative to other options on the market
    Closed project, do not distribute
    
    Features simple to use settings and low amount of wireables, 0 debug options sadly
    Trajectory calculation
    No entity tracking (considered cheating/illegal on just about everywhere)
    Different Aim Modes
    -HitPos - Gun will face towards where you aim with trajectory calculation added on top
    -CamAng - Gun will face the same direction as your camera (useful for shooting close targets)
    
    
    -- Settings Explained
    
    Interval - How fast the chip runs, settings this lower than 100 is not recommended or needed
    
    RotationForce - Strength of the rotation, the higher this value is the faster the gun turns
    DampingForce - Damping strength of the rotation, the higher this value is the stable the gun will be
    
    TurretElevation - How high the turret can aim (default, 60)
    TurretDepression - How low the turret can aim (default, -20)
    
    Turret_Lock_Release_Button - Key used for releasing the gun (default, R)
    Switch_Aim_Mode_Button - Key used for switching the aim mode (default, V)
    
    
    -- Notes
    
    (Recorded on 66 TPS server with 5 people and 3 other tanks out)
    Expected Average CPU Time: 60
    Expected Average OPS: 100
    
    ]#
    
    #-- Settings
    Interval=100
    
    RotationForce=100
    DampingForce=25
    
    TurretElevation=60
    TurretDepression=-20
    
    Turret_Lock_Release_Button = "r"
    Switch_Aim_Mode_Button = "v"
    
    #-- Code
    Lim = vec(0,TurretElevation,TurretDepression)
    Inertia = shiftL(ang(Gun:inertia()))
    
    function void entity:applyQuatTorq(TargetAngle:angle){
        local Torque = (RotationForce*This:toLocal(rotationVector(quat(TargetAngle)/quat(This))+This:pos())-DampingForce*This:angVelVector())*This:inertia()
        Torque = clamp(Torque,-vec(2^31),vec(2^31))
        This:applyTorque(Torque)
    }
    timer("int",Interval)
}
if(changed(Chair:driver())){
    AimMode=GunLockRelease=0
    if(Chair:driver()){
        Chair:printDriver("The Ultimate Turret E2 by Naki V1.0")
        Chair:printDriver(Turret_Lock_Release_Button:upper()+" - Turret Lock Release")
        Chair:printDriver(Switch_Aim_Mode_Button:upper()+" - Switch Aim Mode")
    }
}
if(clk("int")){
    timer("int",Interval)
    LockButton=Chair:driver():keyPressed(Turret_Lock_Release_Button:lower())
    SwitchButton=Chair:driver():keyPressed(Switch_Aim_Mode_Button:lower())
    if(changed(LockButton)&LockButton){
        GunLockRelease=!GunLockRelease
        Chair:hintDriver("Turret Lock: "+(GunLockRelease ? "Off" : "On"),7)
    }
    if(changed(SwitchButton)&SwitchButton){
        AimMode=!AimMode
        Chair:hintDriver("Aiming mode: "+(AimMode ? "HitPos" : "CamAng"),7)
    }
    if(!Gun:isPlayerHolding()){
        D = (Gun:acfCaliber()^2)*pi()/90
        G = gravity()*0.01905
        MuzzleVelocity = Gun:acfMuzzleVel()*0.76
        MuzzleWeight = Gun:acfProjectileMass()*1000
        if(MuzzleVelocity == 0||MuzzleWeight == 0){
            MuzzleVelocity = 200
            MuzzleWeight = 1000
        }
        
        K_D = MuzzleWeight/D
        LocPos = (Cam["HitPos",vector] - Gun:pos())*0.01905
        P = vec2(LocPos):length()
        LowLim = atan(LocPos:z(),P)
        Elevation = ((clamp(acos(P/(K_D*MuzzleVelocity)),0,90)+LowLim)/2)*!Lim:x() + Lim:y()*Lim:x()
        Depression = LowLim*!Lim:x() + Lim:z()*Lim:x()
        CTP = 180/MuzzleVelocity
        if(P < K_D*MuzzleVelocity*cos(Pitch)){
            DragFunction = G*K_D^2*ln(1-P/(K_D*MuzzleVelocity*cos(Pitch))) + P*tan(Pitch) + P*K_D*G/(MuzzleVelocity*cos(Pitch)) - LocPos:z()
        }
        
        DeltaFunction = clamp(abs($DragFunction/clamp(abs($Pitch),0.0000001,10)),0.0000001,1000000)
        Pitch = clamp(Pitch - CTP*DragFunction/DeltaFunction,Depression,Elevation)

        GunAng = ang(-Pitch,LocPos:toAngle():yaw(),0)
        
        DesiredAngle=GunLockRelease ? (AimMode ? GunAng : Cam["CamAng",angle]) : Base:angles()
        Gun:applyQuatTorq(DesiredAngle)
    }
}
